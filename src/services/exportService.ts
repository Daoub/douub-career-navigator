
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { saveAs } from 'file-saver';
import { Document, Packer, Paragraph, TextRun, HeadingLevel } from 'docx';

export interface ExportOptions {
  format: 'pdf' | 'docx' | 'html' | 'json';
  quality: 'standard' | 'high' | 'print';
  template: string;
  language: 'ar' | 'en' | 'both';
  watermark: boolean;
}

export interface ResumeData {
  personalInfo: {
    name: string;
    email?: string;
    phone?: string;
    location?: string;
    summary?: string;
  };
  experience?: Array<{
    title: string;
    company: string;
    startDate: string;
    endDate?: string;
    current?: boolean;
    location?: string;
    description?: string;
    achievements?: string[];
  }>;
  education?: Array<{
    degree: string;
    institution: string;
    startDate: string;
    endDate: string;
    gpa?: string;
    description?: string;
  }>;
  skills?: Array<{
    name: string;
    level: 'beginner' | 'intermediate' | 'advanced' | 'expert';
  }> | string[];
  certificates?: Array<{
    name: string;
    issuer: string;
    date: string;
  }>;
}

class ExportService {
  private getQualitySettings(quality: string) {
    switch (quality) {
      case 'high':
        return { scale: 2, useCORS: true, allowTaint: false };
      case 'print':
        return { scale: 3, useCORS: true, allowTaint: false };
      default:
        return { scale: 1, useCORS: true, allowTaint: false };
    }
  }

  async exportToPDF(resumeData: ResumeData, options: ExportOptions): Promise<void> {
    try {
      const pdf = new jsPDF('p', 'mm', 'a4');
      const qualitySettings = this.getQualitySettings(options.quality);
      
      // Find the resume preview element
      const element = document.querySelector('[data-resume-preview]') as HTMLElement;
      if (!element) {
        throw new Error('Resume preview element not found');
      }

      // Capture the element as canvas
      const canvas = await html2canvas(element, qualitySettings);
      const imgData = canvas.toDataURL('image/png');
      
      // Calculate dimensions
      const imgWidth = 210; // A4 width in mm
      const pageHeight = 295; // A4 height in mm
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      let heightLeft = imgHeight;
      let position = 0;

      // Add first page
      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;

      // Add additional pages if needed
      while (heightLeft >= 0) {
        position = heightLeft - imgHeight;
        pdf.addPage();
        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
        heightLeft -= pageHeight;
      }

      // Add watermark if requested
      if (options.watermark) {
        const totalPages = pdf.getNumberOfPages();
        for (let i = 1; i <= totalPages; i++) {
          pdf.setPage(i);
          pdf.setFontSize(10);
          pdf.setTextColor(150, 150, 150);
          pdf.text('Generated by Doaub - CV Builder', 10, 285);
        }
      }

      // Save the PDF
      const fileName = `${resumeData.personalInfo.name || 'Resume'}_${options.language}.pdf`;
      pdf.save(fileName);
    } catch (error) {
      console.error('PDF export error:', error);
      throw new Error('Failed to export PDF');
    }
  }

  async exportToWord(resumeData: ResumeData, options: ExportOptions): Promise<void> {
    try {
      const doc = new Document({
        sections: [{
          properties: {},
          children: [
            // Header
            new Paragraph({
              text: resumeData.personalInfo.name || 'Resume',
              heading: HeadingLevel.HEADING_1,
              spacing: { after: 200 }
            }),
            
            // Contact Info
            ...(resumeData.personalInfo.email ? [new Paragraph({
              children: [
                new TextRun({ text: 'Email: ', bold: true }),
                new TextRun({ text: resumeData.personalInfo.email })
              ]
            })] : []),
            
            ...(resumeData.personalInfo.phone ? [new Paragraph({
              children: [
                new TextRun({ text: 'Phone: ', bold: true }),
                new TextRun({ text: resumeData.personalInfo.phone })
              ]
            })] : []),
            
            ...(resumeData.personalInfo.location ? [new Paragraph({
              children: [
                new TextRun({ text: 'Location: ', bold: true }),
                new TextRun({ text: resumeData.personalInfo.location })
              ]
            })] : []),

            // Summary
            ...(resumeData.personalInfo.summary ? [
              new Paragraph({
                text: options.language === 'ar' ? 'الملخص المهني' : 'Professional Summary',
                heading: HeadingLevel.HEADING_2,
                spacing: { before: 300, after: 100 }
              }),
              new Paragraph({
                text: resumeData.personalInfo.summary,
                spacing: { after: 200 }
              })
            ] : []),

            // Experience
            ...(resumeData.experience && resumeData.experience.length > 0 ? [
              new Paragraph({
                text: options.language === 'ar' ? 'الخبرة المهنية' : 'Professional Experience',
                heading: HeadingLevel.HEADING_2,
                spacing: { before: 300, after: 100 }
              }),
              ...resumeData.experience.flatMap(exp => [
                new Paragraph({
                  children: [
                    new TextRun({ text: exp.title, bold: true }),
                    new TextRun({ text: ` - ${exp.company}` })
                  ]
                }),
                new Paragraph({
                  text: `${exp.startDate} - ${exp.current ? (options.language === 'ar' ? 'حالياً' : 'Present') : exp.endDate}`,
                  spacing: { after: 100 }
                }),
                ...(exp.description ? [new Paragraph({
                  text: exp.description,
                  spacing: { after: 200 }
                })] : [])
              ])
            ] : []),

            // Education
            ...(resumeData.education && resumeData.education.length > 0 ? [
              new Paragraph({
                text: options.language === 'ar' ? 'التعليم' : 'Education',
                heading: HeadingLevel.HEADING_2,
                spacing: { before: 300, after: 100 }
              }),
              ...resumeData.education.flatMap(edu => [
                new Paragraph({
                  children: [
                    new TextRun({ text: edu.degree, bold: true }),
                    new TextRun({ text: ` - ${edu.institution}` })
                  ]
                }),
                new Paragraph({
                  text: `${edu.startDate} - ${edu.endDate}`,
                  spacing: { after: edu.gpa ? 50 : 200 }
                }),
                ...(edu.gpa ? [new Paragraph({
                  text: `GPA: ${edu.gpa}`,
                  spacing: { after: 200 }
                })] : [])
              ])
            ] : []),

            // Skills
            ...(resumeData.skills && resumeData.skills.length > 0 ? [
              new Paragraph({
                text: options.language === 'ar' ? 'المهارات' : 'Skills',
                heading: HeadingLevel.HEADING_2,
                spacing: { before: 300, after: 100 }
              }),
              new Paragraph({
                text: Array.isArray(resumeData.skills) 
                  ? (typeof resumeData.skills[0] === 'string' 
                      ? (resumeData.skills as string[]).join(', ')
                      : (resumeData.skills as any[]).map(skill => skill.name).join(', '))
                  : '',
                spacing: { after: 200 }
              })
            ] : [])
          ]
        }]
      });

      const buffer = await Packer.toBlob(doc);
      const fileName = `${resumeData.personalInfo.name || 'Resume'}_${options.language}.docx`;
      saveAs(buffer, fileName);
    } catch (error) {
      console.error('Word export error:', error);
      throw new Error('Failed to export Word document');
    }
  }

  async exportToHTML(resumeData: ResumeData, options: ExportOptions): Promise<void> {
    try {
      const htmlContent = this.generateHTMLContent(resumeData, options);
      const blob = new Blob([htmlContent], { type: 'text/html;charset=utf-8' });
      const fileName = `${resumeData.personalInfo.name || 'Resume'}_${options.language}.html`;
      saveAs(blob, fileName);
    } catch (error) {
      console.error('HTML export error:', error);
      throw new Error('Failed to export HTML');
    }
  }

  async exportToJSON(resumeData: ResumeData, options: ExportOptions): Promise<void> {
    try {
      const jsonContent = JSON.stringify(resumeData, null, 2);
      const blob = new Blob([jsonContent], { type: 'application/json;charset=utf-8' });
      const fileName = `${resumeData.personalInfo.name || 'Resume'}_${options.language}.json`;
      saveAs(blob, fileName);
    } catch (error) {
      console.error('JSON export error:', error);
      throw new Error('Failed to export JSON');
    }
  }

  private generateHTMLContent(resumeData: ResumeData, options: ExportOptions): string {
    const isArabic = options.language === 'ar';
    
    return `
<!DOCTYPE html>
<html lang="${isArabic ? 'ar' : 'en'}" dir="${isArabic ? 'rtl' : 'ltr'}">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${resumeData.personalInfo.name || 'Resume'}</title>
    <style>
        body {
            font-family: ${isArabic ? 'Arial, sans-serif' : 'Georgia, serif'};
            line-height: 1.6;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            color: #333;
        }
        .header {
            text-align: center;
            border-bottom: 2px solid #333;
            padding-bottom: 20px;
            margin-bottom: 30px;
        }
        .section {
            margin-bottom: 30px;
        }
        .section-title {
            font-size: 1.5em;
            font-weight: bold;
            border-bottom: 1px solid #ccc;
            padding-bottom: 5px;
            margin-bottom: 15px;
        }
        .contact-info {
            display: flex;
            justify-content: center;
            gap: 20px;
            flex-wrap: wrap;
            margin-top: 10px;
        }
        .experience-item, .education-item {
            margin-bottom: 20px;
            padding-left: ${isArabic ? '0' : '20px'};
            padding-right: ${isArabic ? '20px' : '0'};
        }
        .job-title, .degree {
            font-weight: bold;
            font-size: 1.1em;
        }
        .company, .institution {
            font-style: italic;
            color: #666;
        }
        .dates {
            color: #888;
            font-size: 0.9em;
        }
        .skills {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }
        .skill {
            background: #f0f0f0;
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 0.9em;
        }
        @media print {
            body { margin: 0; padding: 15px; }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>${resumeData.personalInfo.name || 'Resume'}</h1>
        <div class="contact-info">
            ${resumeData.personalInfo.email ? `<span>📧 ${resumeData.personalInfo.email}</span>` : ''}
            ${resumeData.personalInfo.phone ? `<span>📱 ${resumeData.personalInfo.phone}</span>` : ''}
            ${resumeData.personalInfo.location ? `<span>📍 ${resumeData.personalInfo.location}</span>` : ''}
        </div>
    </div>

    ${resumeData.personalInfo.summary ? `
    <div class="section">
        <h2 class="section-title">${isArabic ? 'الملخص المهني' : 'Professional Summary'}</h2>
        <p>${resumeData.personalInfo.summary}</p>
    </div>
    ` : ''}

    ${resumeData.experience && resumeData.experience.length > 0 ? `
    <div class="section">
        <h2 class="section-title">${isArabic ? 'الخبرة المهنية' : 'Professional Experience'}</h2>
        ${resumeData.experience.map(exp => `
            <div class="experience-item">
                <div class="job-title">${exp.title}</div>
                <div class="company">${exp.company}</div>
                <div class="dates">${exp.startDate} - ${exp.current ? (isArabic ? 'حالياً' : 'Present') : exp.endDate}</div>
                ${exp.description ? `<p>${exp.description}</p>` : ''}
            </div>
        `).join('')}
    </div>
    ` : ''}

    ${resumeData.education && resumeData.education.length > 0 ? `
    <div class="section">
        <h2 class="section-title">${isArabic ? 'التعليم' : 'Education'}</h2>
        ${resumeData.education.map(edu => `
            <div class="education-item">
                <div class="degree">${edu.degree}</div>
                <div class="institution">${edu.institution}</div>
                <div class="dates">${edu.startDate} - ${edu.endDate}</div>
                ${edu.gpa ? `<div>GPA: ${edu.gpa}</div>` : ''}
            </div>
        `).join('')}
    </div>
    ` : ''}

    ${resumeData.skills && resumeData.skills.length > 0 ? `
    <div class="section">
        <h2 class="section-title">${isArabic ? 'المهارات' : 'Skills'}</h2>
        <div class="skills">
            ${Array.isArray(resumeData.skills) 
              ? (typeof resumeData.skills[0] === 'string' 
                  ? (resumeData.skills as string[]).map(skill => `<span class="skill">${skill}</span>`).join('')
                  : (resumeData.skills as any[]).map(skill => `<span class="skill">${skill.name}</span>`).join(''))
              : ''}
        </div>
    </div>
    ` : ''}
</body>
</html>`;
  }

  async exportResume(resumeData: ResumeData, options: ExportOptions): Promise<void> {
    switch (options.format) {
      case 'pdf':
        return this.exportToPDF(resumeData, options);
      case 'docx':
        return this.exportToWord(resumeData, options);
      case 'html':
        return this.exportToHTML(resumeData, options);
      case 'json':
        return this.exportToJSON(resumeData, options);
      default:
        throw new Error(`Unsupported export format: ${options.format}`);
    }
  }
}

export const exportService = new ExportService();
